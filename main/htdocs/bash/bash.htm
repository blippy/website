<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
<title>bash</title>
</head>

<body>

<a href="../index.html">Home</a>

<h1>bash</h1>


<hr><h2>Command-line processing</h2>

<h3>Arguments</h3>

<p><code>$*</code> - all the command arguments
<p><code>$#</code> - number of arguments (excludes the command itself)
<p><code>${@:2}</code> - arguments 2 onwards. E.g. <code>interesting=${@:2}</code>

<h3>Printing help</h3>
<pre>
function print_help {
cat &lt;&lt;EOF                                                                       
$0 - accounts processing                                                        
-d download, decode and store values                                            
-h this help                                                                    
-m prep, create accounts, enyafi                                                
EOF                                                                             
}
</pre>

<h3>Getopts</h3>
<pre>
while getopts "a:h" opt
do
    case $opt in
        a) echo "$OPTARG" &gt;&gt;$FILE ;; # OPTARG in quotes to preserve spaces
        h) print_help ;;
        *) echo Unknown option ; print_help ;;
    esac
done

</pre>



<hr><h2>Existence</h2>

<pre>
# check if a COMMAND does/does not exist:
command -v foo &gt;/dev/null 2&gt;&1 && echo success || echo fail
# check if a DIRECTORY exists:
[[ -d "$DIRECTORY" ]] && do something
# check if EXECUTABLE:
[[ -x "$PATH_TO_EXE" ]] && do something


Others:
-h symbolic link
-f file exists

</pre>

<hr><h2>Feeding command output to a while loop without using pipes</h2>

From a file:
<pre>
while read line
do
 echo $line
done &lt;FILE
</pre>

From a command output
<pre>
ls -1d *|while read line
do
 echo $line
done
</pre>


<hr><h2>If</h2>

One-line statements:
<pre>   if [ "$QUIET" != "-q" ]; then echo ; echo $cmd ; fi</pre>


<hr><h2>Inline here documents</h2>

<code>&lt;&lt;&lt;</code> - inline here documents. E.g.
<pre>bc &lt;&lt;&lt; "scale=2; 10*100/3"
333.33
</pre>

<hr><h2>Redirect as pseudo-file</h2>

Example: <code>comm</code> takes two file names as arguments. You can treat outputs from other commands as file arguments to <code>comm</code> using a structure like:
<pre>comm -12 &lt;(sort names1) &lt;(sort names2)</pre>

<hr><h2>Random numbers</h2>

Generate a random number: <code>echo $RANDOM</code><br>
Generate a number between 0 and 9 inclusive: <code>echo $((RANDOM%10))</code><br>
Generate a number between 100 and 109 inclusive: <code>echo $((RANDOM%10+100))</code><br>
<a href="http://www.cyberciti.biz/faq/bash-shell-script-generating-random-numbers/">xlink</a>


<hr><h2>See also</h2>

<li><a href="rc.htm">rc</a> - initialisation files

<hr><h2>Links to other sites</h2>


<li><a href="http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in">What directory is a bash script stored in?</a>

<li><a href="http://www.linuxjournal.com/content/working-stdin-and-stdout?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+linuxjournalcom+%28Linux+Journal+-+The+Original+Magazine+of+the+Linux+Community%29">Working with Stdin and Stdout</a> - explains many nuances of stdin, stdout and stderr, and how to determine if a script is input or output is a pipe or file, or via the keyboard and the screen

<hr><pre>
Author:  Mark Carter
Created: 14-May-2011
Updated: 22-Feb-2014
</pre>
</body></html>
