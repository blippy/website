<html><head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <LINK REL=StyleSheet HREF="../../style.css" TYPE="text/css">
  <title>C++</title></head>
<body>


<a href="../../index.html">Home</a> : <a href="../programming.htm">programming</a>
: <a href="cxx.htm">cxx</a>

<h1>Maths</h1>

<hr><h2>Exceptions</h2>

To enable exceptions to be thrown for <code>double</code>s (it does not work on 
<code>int</code>s), call the GNU libc function <code>feenableexcept()</code>:


<pre>
#include &lt;cfenv&gt;
#include &lt;iostream&gt;

using std::cout;
using std::endl;

int main()
{
        feenableexcept(FE_ALL_EXCEPT); // a GNU libc function

	double d = 10;	
        while(true) {
                d = d * d;
                cout &lt;&lt; d &lt;&lt; endl;
        }       
        return 0;
}             
</pre>

Output:
<pre>
100
10000
1e+08
1e+16
Floating point exception (core dumped)
</pre>

<hr><h2>Rounding</h2>

I have a bankers rounding algorithm in mcacc:reuable.cc:
<pre>
double bround(double x) 
{
  double c ,f, det;
  c = ceil(x);
  f = floor(x);

  // eliminate strange artifacts of creating &quot;negative 0&quot;
  if(c == 0) c = 0.0;
  if(f == 0) f = 0.0;
  // printf(&quot;c: %f &quot;, c);


  det = c + f - 2.0*x;
  if (det &lt; 0) {return c;}
  if (det &gt; 0) {return f;}

  /* banker&#x27;s tie */
  if(2*ceil(c/2) == c) {return c;} else {return f;};

}

double round2(double x) { return bround(x*100)/100; }
</pre>
<p>
HOWEVER, it appears that <code>std::nearbyint()</code> can be used to achieve banker, or other, rounding. 
<pre>
#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;cfenv&gt;

int main()
{
#pragma STDC FENV_ACCESS ON
    std::fesetround(FE_TONEAREST); // bankers rounding
    std::cout &lt;&lt; std::nearbyint(2.5) ; // prints 2
}
</pre>







<hr><h2>Links to other sites</h2>

None

<hr><pre>
Author:  Mark Carter
Created: 04-Oct-2016
Updated: 04-Oct-2016
</small>
</body>
</html>
