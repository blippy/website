<html><head>
    <LINK REL=StyleSheet HREF="../style.css" TYPE="text/css">
    <title>Fortran</title>
</head>

<body>
<a href="../../index.html">Home</a>
: <a href="../programming.htm" >programming</a>
: <a href="fortran.htm" >fortran</a>

<hr><h1>Calendrical</h1>

Time and date functions in Fortran

<hr><h2>datetime-fortran</h2>

Excellent repo on github:
<pre>
git clone https://github.com/milancurcic/datetime-fortran
</pre>

Forum thread by me for a PKGCONFIG file for Arch: <a href="https://bbs.archlinux.org/viewtopic.php?pid=1598198#p1598198">xlink</a>


<h3>Building and installing</h3>

At at 25-Jan-2016, autotools is still pending merging into milancurcic's master branch. I will assume that the merge has occurred for the sake of the next discussion.

<p>Prepping the repo for compiling is fairly straightforward, and involves the following standard steps: <code>./configure && make && [sudo] make install</code>. This will install to the default location <code>/usr/local</code>, which you can change in the time-honoured way: <code>./configure --prefix=/path/to/wherever</code>. If the configuration gets stale for whatever reason, you can "refresh" autotools by issuing the command <code>autoreconf -i</code>, followed by <code>./configure</code>.

  
<p>You can create a tarball for distribution by typing the command: <code>make dist</code>.
  
<h3>Using the module in a project</h3>

Suppose you want to use the <code>datetime-fortran</code> library. Make some directory (not <code>datetime-fortran</code>) to house your project. Create the file <code>dtfeq.f90</code>, for example:
<pre>
  program dtfeg
  ! very simple example of using datetime-fortran
  use datetime_module
  type(datetime) :: dt
  
  dt = dt%now()
  print *, 'The time now is: ', dt%isoformat()
  end program dtfeg
</pre>

If you want to be lazy, you can create a makefile, let's call it <code>Makefile.lazy</code>:
<pre>
# -*- makefile-mode -*-
INC = $(shell pkg-config --cflags datetime-fortran)

dtfeg : dtfeg.f90
	gfortran -o dtfeg $(INC) dtfeg.f90 -ldatetime
</pre>
To compile:
<pre>
  make -f Makefile.lazy
</pre>

The variable <code>$(INC)</code> will "automagically" pick up the right compiler flags for you. Behind the scenes it obtains the flag from <code>pkg-config</code>.

<p>Alternatively, you can put in a little more effort, and go down the autotools route. So, instead of creating <code>Makefile.lazy</code>, create a <code>configure.ac</code> file:
<pre>
AC_PREREQ([2.69])
AC_INIT([datetime-fortran-demo], [0.0.0])
AC_CONFIG_SRCDIR([dtfeg.f90])
AM_INIT_AUTOMAKE([foreign]) # foreign => not a std GNU project

AC_PROG_CC_C99 
AC_LANG([Fortran])
AC_FC_SRCEXT([f90])

# Sets variables DTF_CFLAGS and and DTF_LIBS from
# datetime-fortran so that you can compile and link with
# the library. You can change `DTF' to any other name that you like.
PKG_CHECK_MODULES([DTF], [datetime-fortran]) 

AC_FC_LIBRARY_LDFLAGS
AC_FC_MODULE_FLAG

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
</pre>
and a <code>Makefile.am</code> file:
<pre>
bin_PROGRAMS = dtfeg

dtfeg$(EXEEXT) : dtfeg.f90
	$(FC) -o dtfeg $(DTF_CFLAGS) dtfeg.f90 $(DTF_LIBS) 
</pre>
Generate the configure file: <code>autorecof -i</code>
<p>Configure: <code>./configure</code>
<p>Make the executable: <code>make</code>
<p>Finally, run your handiwork: <code>./dtfeg</code>
<p>Happy coding!    

<hr><h2>Links to other sites</h2>


<hr><pre>
Author:  Mark Carter
Created: 23-Jan-2016
Updated: 25-Jan-2016
</pre>
</body>
</html>
