Literate iteratesI'm a VB/python programmer, and I've decided to give Scheme a spin; again. Idownloaded PLT for Windows. I read section 6.3, which states: "Scheme can define loops only throughrecursion. There are no special looping or iteration constructs." So myquestion is: be honest now, isn't that a bit crap? I mean, even Visual Basiccan do loops!I tried a simple exercise: to read a file, and print its contents. There is asolution to reading in a file presented on this newsgroup a long time ago:(define (read-file filename)  (define (loop)    (let ((line (read-line)))      (if (eof-object? line)          '()          (cons line                (loop)))))  (with-input-from-file filename loop))My bones of contention are:1. It's memory intensive, because you have to create a list of lines for thefile, rather than just process each line at a time2. The code is "unnatural", because I can't express my algorithm in code form.What I really want to be able to write is something like:(for line (file "blah.txt")	(display line))but I can't - Scheme forces me to shoehorn my thinking into its conception ofthe way programs should be written.In Python I could write:for line in file("blah.txt"):	print lineVery neat!What's interesting about this code, AFAIK, is that it uses generators (it'shidden in file()). I've looked at generators in Python, and they seem easy tounderstand and use. Am I right in thinking that Scheme supports generators, butcalls them continuations? My only problem is that I don't really understand thedocumentation. So, is there a neat solution to the problem involvinggenerators?Alternatively, it seems that Scheme is in desparate need of a repeat macro ...if only I could get my head around macros.---In article <d3c9c04.0311240859.33e70c62@posting.google.com>,Mark Carter <cartermark46@ukmail.com> wrote:>>I read section 6.3, which states: "Scheme can define loops only through>recursion. There are no special looping or iteration constructs." So my>question is: be honest now, isn't that a bit crap? I mean, even Visual Basic>can do loops!Well, it's not the whole story.  But we promise that it's a goodway to learn at first.>(define (read-file filename)>  (define (loop)>    (let ((line (read-line)))>      (if (eof-object? line)>          '()>          (cons line>                (loop)))))>  (with-input-from-file filename loop))>>My bones of contention are:>1. It's memory intensive, because you have to create a list of lines for the>file, rather than just process each line at a timeIf you want to process one line at a time, then just do so.Instead of calling cons, do whatever it is you like.>2. The code is "unnatural", because I can't express my algorithm in code form.>What I really want to be able to write is something like:>>(for line (file "blah.txt")> (display line))Here:(define (read-file filename)  (define (loop)    (let ((line (read-line)))      (if (not (eof-object? line))          (begin (display line)                (loop)))))  (with-input-from-file filename loop))>but I can't - Scheme forces me to shoehorn my thinking into its conception of>the way programs should be written.Oh, so not true.  You can shoehorn Scheme into supporting prettymuch any style you want.You're just not there yet.(And by the way, isn't your motivation for learning Scheme toopen yourself up to new ways of thinking?)>for line in file("blah.txt"):> print lineWell, even with macros, how about using a helper function:(define (for-each-file proc filename)  (define (loop)    (let ((line (read-line)))      (if (not (eof-object? line))          (begin (proc line)                (loop)))))  (with-input-from-file filename loop))And then you can do:(for-each-file display "blah.txt")>What's interesting about this code, AFAIK, is that it uses generators (it's>hidden in file()). I've looked at generators in Python, and they seem easy to>understand and use. Am I right in thinking that Scheme supports generators, but>calls them continuations? My only problem is that I don't really understand the>documentation. So, is there a neat solution to the problem involving>generators?Continuations aren't really an iteration construct, although youcan certainly use them for things related to iteration.I'm not sure you're ready for continuations, but somebody canpost pointers to good introductions to continuations if you needthem (or check Google Groups; it's a common question).>Alternatively, it seems that Scheme is in desparate need of a repeat macro ...>if only I could get my head around macros.You'll get there.-- Jeffrey M. Vinocur   *   jmv16@cornell.eduhttp://www.people.cornell.edu/pages/jmv16/--- From: Anton van Straaten (anton@appsolutions.com)Subject: Re: Literate iterates View: Complete Thread (6 articles)  Original Format Newsgroups: comp.lang.schemeDate: 2003-11-24 13:00:51 PST  Mark Carter wrote:> I'm a VB/python programmer, and I've decided to give Scheme a spin; again. I> downloaded PLT for Windows.>> I read section 6.3, which states: "Scheme can define loops only through> recursion. There are no special looping or iteration constructs." So my> question is: be honest now, isn't that a bit crap? I mean, even Visual Basic> can do loops!I think you've misinterpreted the quote.  It didn't say that Scheme "can'tdo loops", it said "There are no special looping or iteration constructs".There *are* looping/iteration constructs, like 'do', but they're not"special" - they can be implemented as a macro, using recursion.  The Schemestandard (R5RS) actually provides the source code for 'do' as a macro.The point is that recursion is more powerful than iteration - any iterationcan easily be implemented in terms of recursion, but the reverse isn't true.Scheme doesn't lose anything by not providing iteration constructs as"special", core constructs.BTW, you left out the next part of the quote from "Teach Yourself Scheme inFixnum Days" [TYSiFD], which goes: "Nevertheless, the loop as defined aboveis a genuine loop, in exactly the same way that other languages bill theirloops. I.e., Scheme takes special care to ensure that recursion of the typeused above will not generate the procedure call/return overhead."> I tried a simple exercise: to read a file, and print its contents. There is a> solution to reading in a file presented on this newsgroup a long time ago:>> (define (read-file filename)>   (define (loop)>     (let ((line (read-line)))>       (if (eof-object? line)>           '()>           (cons line>                 (loop)))))>   (with-input-from-file filename loop))>> My bones of contention are:> 1. It's memory intensive, because you have to create a list of lines for the> file, rather than just process each line at a time> 2. The code is "unnatural", because I can't express my algorithm in code form.> What I really want to be able to write is something like:>> (for line (file "blah.txt")> (display line))The very next section of TYSiFD, 6.4, "Mapping a procedure across a list",offers a way that will allow you to do this.  It would involve writing aprocedure which applies a provided function to each line in the file, as itis read.  This would allow you to write something like this:(for-each-line-in-file "blah.txt" display)(In fact, a search of c.l.s. for that function name might even turn up afully coded solution.)  This doesn't suffer from either of the problemsyou're concerned about.  Note that the reference to 'display' above can bereplaced by an arbitrary procedure, including an anonymous lambda.> What's interesting about this code, AFAIK, is that it uses generators> (it's hidden in file()). I've looked at generators in Python, and they> seem easy to understand and use. Am I right in thinking that Scheme> supports generators, but calls them continuations? My only problem> is that I don't really understand the documentation. So, is there a> neat solution to the problem involving generators?You don't really need them for something like this.  The example aboveaddresses the issue by applying a provided function to each line as it isread.However, in cases where you really do need something else, a common solutionin Scheme and functional languages is lazy streams.  All you really need toimplement these are lambdas.  You can find treatment of this in some of themore comprehensive sources, such as SICP:http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5And a bit of motivation for streams can be found at:http://srfi.schemers.org/srfi-40/srfi-40.txtThis is a relatively advanced topic, though, although it would be easyenough to construct a stream of lines from a file.  The point is, Schemecertainly isn't going to stop you from getting as sophisticated as you needor want to get.Anton